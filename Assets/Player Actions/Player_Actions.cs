//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/Player Actions/Player_Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Player Actions/Player_Actions.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @Player_Actions: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @Player_Actions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player_Actions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""f91280f5-272f-4deb-9c38-2368f2423d58"",
            ""actions"": [
                {
                    ""name"": ""EnableFreeCam"",
                    ""type"": ""Button"",
                    ""id"": ""693ffaf3-1545-48e5-b54c-53190b33f65c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""596f38dd-216d-4707-bb50-be4b1e286e00"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EnableFreeCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""FreeCam"",
            ""id"": ""7b4ad4ad-f9ef-4a29-a691-3510abf2ac32"",
            ""actions"": [
                {
                    ""name"": ""disableFreeCam"",
                    ""type"": ""Button"",
                    ""id"": ""3a8af39f-d110-4bd0-bea9-8eb897cd769b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""camMove"",
                    ""type"": ""Value"",
                    ""id"": ""dfe8977a-ca0c-48cd-bf47-02c272b1db66"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""camLook"",
                    ""type"": ""Value"",
                    ""id"": ""c7973927-da3b-4ec7-826f-8c6ca2f9a60b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""camUp"",
                    ""type"": ""Button"",
                    ""id"": ""3c80a087-edc2-4ba3-94fb-bd6b19564595"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""camDown"",
                    ""type"": ""Button"",
                    ""id"": ""edeccf11-6d0b-435b-986f-77c059ad53f5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""camFast"",
                    ""type"": ""Button"",
                    ""id"": ""d843d120-c079-4cce-b9f0-6a028013ceee"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""camTimeSwap"",
                    ""type"": ""Button"",
                    ""id"": ""325bbda0-1136-4eeb-a5df-5bef270a6d36"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b77fb0b8-8899-46a9-8cda-9bd412867172"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""disableFreeCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""f023e5c2-956d-4ea8-98c1-ae12f6d2a959"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""camMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""27786fbc-f6d5-49de-b354-1bc4552235b8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""camMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""357b83b0-351a-4819-bce6-d56e04cf0440"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""camMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""718a38ba-6583-4c5b-881b-61c77a877841"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""camMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a359f803-76ab-4491-8b41-482f96b29d19"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""camMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d57b1674-61ba-46ef-b816-89088c853cec"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""camUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c150203e-c705-428a-bac9-ec19b2b20177"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""camDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f177398-0803-4579-923d-5e45d81b853d"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""camFast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""50714740-e66d-4b01-bdd8-5ecc5ed06b2c"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""camTimeSwap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18886fb7-c42c-4311-a47f-3a0166b7e5e8"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""camLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_EnableFreeCam = m_Player.FindAction("EnableFreeCam", throwIfNotFound: true);
        // FreeCam
        m_FreeCam = asset.FindActionMap("FreeCam", throwIfNotFound: true);
        m_FreeCam_disableFreeCam = m_FreeCam.FindAction("disableFreeCam", throwIfNotFound: true);
        m_FreeCam_camMove = m_FreeCam.FindAction("camMove", throwIfNotFound: true);
        m_FreeCam_camLook = m_FreeCam.FindAction("camLook", throwIfNotFound: true);
        m_FreeCam_camUp = m_FreeCam.FindAction("camUp", throwIfNotFound: true);
        m_FreeCam_camDown = m_FreeCam.FindAction("camDown", throwIfNotFound: true);
        m_FreeCam_camFast = m_FreeCam.FindAction("camFast", throwIfNotFound: true);
        m_FreeCam_camTimeSwap = m_FreeCam.FindAction("camTimeSwap", throwIfNotFound: true);
    }

    ~@Player_Actions()
    {
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, Player_Actions.Player.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_FreeCam.enabled, "This will cause a leak and performance issues, Player_Actions.FreeCam.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_EnableFreeCam;
    /// <summary>
    /// Provides access to input actions defined in input action map "Player".
    /// </summary>
    public struct PlayerActions
    {
        private @Player_Actions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public PlayerActions(@Player_Actions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Player/EnableFreeCam".
        /// </summary>
        public InputAction @EnableFreeCam => m_Wrapper.m_Player_EnableFreeCam;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="PlayerActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="PlayerActions" />
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @EnableFreeCam.started += instance.OnEnableFreeCam;
            @EnableFreeCam.performed += instance.OnEnableFreeCam;
            @EnableFreeCam.canceled += instance.OnEnableFreeCam;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="PlayerActions" />
        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @EnableFreeCam.started -= instance.OnEnableFreeCam;
            @EnableFreeCam.performed -= instance.OnEnableFreeCam;
            @EnableFreeCam.canceled -= instance.OnEnableFreeCam;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="PlayerActions.UnregisterCallbacks(IPlayerActions)" />.
        /// </summary>
        /// <seealso cref="PlayerActions.UnregisterCallbacks(IPlayerActions)" />
        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="PlayerActions.AddCallbacks(IPlayerActions)" />
        /// <seealso cref="PlayerActions.RemoveCallbacks(IPlayerActions)" />
        /// <seealso cref="PlayerActions.UnregisterCallbacks(IPlayerActions)" />
        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="PlayerActions" /> instance referencing this action map.
    /// </summary>
    public PlayerActions @Player => new PlayerActions(this);

    // FreeCam
    private readonly InputActionMap m_FreeCam;
    private List<IFreeCamActions> m_FreeCamActionsCallbackInterfaces = new List<IFreeCamActions>();
    private readonly InputAction m_FreeCam_disableFreeCam;
    private readonly InputAction m_FreeCam_camMove;
    private readonly InputAction m_FreeCam_camLook;
    private readonly InputAction m_FreeCam_camUp;
    private readonly InputAction m_FreeCam_camDown;
    private readonly InputAction m_FreeCam_camFast;
    private readonly InputAction m_FreeCam_camTimeSwap;
    /// <summary>
    /// Provides access to input actions defined in input action map "FreeCam".
    /// </summary>
    public struct FreeCamActions
    {
        private @Player_Actions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public FreeCamActions(@Player_Actions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "FreeCam/disableFreeCam".
        /// </summary>
        public InputAction @disableFreeCam => m_Wrapper.m_FreeCam_disableFreeCam;
        /// <summary>
        /// Provides access to the underlying input action "FreeCam/camMove".
        /// </summary>
        public InputAction @camMove => m_Wrapper.m_FreeCam_camMove;
        /// <summary>
        /// Provides access to the underlying input action "FreeCam/camLook".
        /// </summary>
        public InputAction @camLook => m_Wrapper.m_FreeCam_camLook;
        /// <summary>
        /// Provides access to the underlying input action "FreeCam/camUp".
        /// </summary>
        public InputAction @camUp => m_Wrapper.m_FreeCam_camUp;
        /// <summary>
        /// Provides access to the underlying input action "FreeCam/camDown".
        /// </summary>
        public InputAction @camDown => m_Wrapper.m_FreeCam_camDown;
        /// <summary>
        /// Provides access to the underlying input action "FreeCam/camFast".
        /// </summary>
        public InputAction @camFast => m_Wrapper.m_FreeCam_camFast;
        /// <summary>
        /// Provides access to the underlying input action "FreeCam/camTimeSwap".
        /// </summary>
        public InputAction @camTimeSwap => m_Wrapper.m_FreeCam_camTimeSwap;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_FreeCam; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="FreeCamActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(FreeCamActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="FreeCamActions" />
        public void AddCallbacks(IFreeCamActions instance)
        {
            if (instance == null || m_Wrapper.m_FreeCamActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FreeCamActionsCallbackInterfaces.Add(instance);
            @disableFreeCam.started += instance.OnDisableFreeCam;
            @disableFreeCam.performed += instance.OnDisableFreeCam;
            @disableFreeCam.canceled += instance.OnDisableFreeCam;
            @camMove.started += instance.OnCamMove;
            @camMove.performed += instance.OnCamMove;
            @camMove.canceled += instance.OnCamMove;
            @camLook.started += instance.OnCamLook;
            @camLook.performed += instance.OnCamLook;
            @camLook.canceled += instance.OnCamLook;
            @camUp.started += instance.OnCamUp;
            @camUp.performed += instance.OnCamUp;
            @camUp.canceled += instance.OnCamUp;
            @camDown.started += instance.OnCamDown;
            @camDown.performed += instance.OnCamDown;
            @camDown.canceled += instance.OnCamDown;
            @camFast.started += instance.OnCamFast;
            @camFast.performed += instance.OnCamFast;
            @camFast.canceled += instance.OnCamFast;
            @camTimeSwap.started += instance.OnCamTimeSwap;
            @camTimeSwap.performed += instance.OnCamTimeSwap;
            @camTimeSwap.canceled += instance.OnCamTimeSwap;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="FreeCamActions" />
        private void UnregisterCallbacks(IFreeCamActions instance)
        {
            @disableFreeCam.started -= instance.OnDisableFreeCam;
            @disableFreeCam.performed -= instance.OnDisableFreeCam;
            @disableFreeCam.canceled -= instance.OnDisableFreeCam;
            @camMove.started -= instance.OnCamMove;
            @camMove.performed -= instance.OnCamMove;
            @camMove.canceled -= instance.OnCamMove;
            @camLook.started -= instance.OnCamLook;
            @camLook.performed -= instance.OnCamLook;
            @camLook.canceled -= instance.OnCamLook;
            @camUp.started -= instance.OnCamUp;
            @camUp.performed -= instance.OnCamUp;
            @camUp.canceled -= instance.OnCamUp;
            @camDown.started -= instance.OnCamDown;
            @camDown.performed -= instance.OnCamDown;
            @camDown.canceled -= instance.OnCamDown;
            @camFast.started -= instance.OnCamFast;
            @camFast.performed -= instance.OnCamFast;
            @camFast.canceled -= instance.OnCamFast;
            @camTimeSwap.started -= instance.OnCamTimeSwap;
            @camTimeSwap.performed -= instance.OnCamTimeSwap;
            @camTimeSwap.canceled -= instance.OnCamTimeSwap;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="FreeCamActions.UnregisterCallbacks(IFreeCamActions)" />.
        /// </summary>
        /// <seealso cref="FreeCamActions.UnregisterCallbacks(IFreeCamActions)" />
        public void RemoveCallbacks(IFreeCamActions instance)
        {
            if (m_Wrapper.m_FreeCamActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="FreeCamActions.AddCallbacks(IFreeCamActions)" />
        /// <seealso cref="FreeCamActions.RemoveCallbacks(IFreeCamActions)" />
        /// <seealso cref="FreeCamActions.UnregisterCallbacks(IFreeCamActions)" />
        public void SetCallbacks(IFreeCamActions instance)
        {
            foreach (var item in m_Wrapper.m_FreeCamActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FreeCamActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="FreeCamActions" /> instance referencing this action map.
    /// </summary>
    public FreeCamActions @FreeCam => new FreeCamActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Player" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="PlayerActions.AddCallbacks(IPlayerActions)" />
    /// <seealso cref="PlayerActions.RemoveCallbacks(IPlayerActions)" />
    public interface IPlayerActions
    {
        /// <summary>
        /// Method invoked when associated input action "EnableFreeCam" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnEnableFreeCam(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "FreeCam" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="FreeCamActions.AddCallbacks(IFreeCamActions)" />
    /// <seealso cref="FreeCamActions.RemoveCallbacks(IFreeCamActions)" />
    public interface IFreeCamActions
    {
        /// <summary>
        /// Method invoked when associated input action "disableFreeCam" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDisableFreeCam(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "camMove" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCamMove(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "camLook" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCamLook(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "camUp" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCamUp(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "camDown" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCamDown(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "camFast" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCamFast(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "camTimeSwap" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCamTimeSwap(InputAction.CallbackContext context);
    }
}
